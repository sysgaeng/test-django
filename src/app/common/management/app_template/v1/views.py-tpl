from drf_spectacular.utils import extend_schema, extend_schema_view
from rest_framework import mixins
from rest_framework.exceptions import MethodNotAllowed
from rest_framework.viewsets import GenericViewSet

from app.common.pagination import CursorPagination
from app.{{ app_name }}.v1.filters import {{ camel_case_app_name }}Filter
from app.{{ app_name }}.v1.permissions import {{ camel_case_app_name }}Permission
from app.{{ app_name }}.v1.serializers import {{ camel_case_app_name }}Serializer
from app.{{ app_name }}.models import {{ camel_case_app_name }}


@extend_schema_view(
    list=extend_schema(summary="{{ camel_case_app_name }} 목록 조회"),
    create=extend_schema(summary="{{ camel_case_app_name }} 등록"),
    retrieve=extend_schema(summary="{{ camel_case_app_name }} 상세 조회"),
    update=extend_schema(summary="{{ camel_case_app_name }} 수정"),
    partial_update=extend_schema(exclude=True),
    destroy=extend_schema(summary="{{ camel_case_app_name }} 삭제"),
)
class {{ camel_case_app_name }}ViewSet(
    mixins.ListModelMixin,
    mixins.CreateModelMixin,
    mixins.RetrieveModelMixin,
    mixins.UpdateModelMixin,
    mixins.DestroyModelMixin,
    GenericViewSet,
):
    queryset = {{ camel_case_app_name }}.objects.all()
    serializer_class = {{ camel_case_app_name }}Serializer
    permission_classes = [{{ camel_case_app_name }}Permission]
    pagination_class = CursorPagination
    filterset_class = {{ camel_case_app_name }}Filter

    def get_queryset(self):
        queryset = super().get_queryset()
        return queryset

    # 특정 action에 다른 Filter를 설정해야하는 경우 사용
    def get_filterset_class(self):
        return getattr(self, "filterset_class", None)

    def patch(self, request, *args, **kwargs):
        raise MethodNotAllowed("patch")
